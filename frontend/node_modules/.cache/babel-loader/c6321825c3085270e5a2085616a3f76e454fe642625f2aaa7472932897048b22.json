{"ast":null,"code":"/**\n * Simulated homomorphic encryption utility\n * In a real implementation, this would use an actual homomorphic encryption library\n */\n\n// Simulated public key - in reality, this would be provided by the server\nconst MOCK_PUBLIC_KEY = 'mock-public-key-2025';\n\n/**\n * Simulates homomorphic encryption of data\n * @param {Object} data - The data to encrypt\n * @returns {string} - Simulated encrypted data\n */\nexport const encryptData = data => {\n  // This is a placeholder encryption simulation\n  // In production, use a real homomorphic encryption library\n  const mockEncrypted = Buffer.from(JSON.stringify(data)).toString('base64');\n  return `encrypted_${mockEncrypted}_${MOCK_PUBLIC_KEY}`;\n};\n\n/**\n * Validates email format\n * @param {string} email - Email to validate\n * @returns {boolean} - Whether email is valid\n */\nexport const isValidEmail = email => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n/**\n * Validates age input\n * @param {number} age - Age to validate\n * @returns {boolean} - Whether age is valid\n */\nexport const isValidAge = age => {\n  return age >= 0 && age <= 120;\n};","map":{"version":3,"names":["MOCK_PUBLIC_KEY","encryptData","data","mockEncrypted","Buffer","from","JSON","stringify","toString","isValidEmail","email","emailRegex","test","isValidAge","age"],"sources":["C:/treehacks-2025/frontend/src/utils/encryption.js"],"sourcesContent":["/**\n * Simulated homomorphic encryption utility\n * In a real implementation, this would use an actual homomorphic encryption library\n */\n\n// Simulated public key - in reality, this would be provided by the server\nconst MOCK_PUBLIC_KEY = 'mock-public-key-2025';\n\n/**\n * Simulates homomorphic encryption of data\n * @param {Object} data - The data to encrypt\n * @returns {string} - Simulated encrypted data\n */\nexport const encryptData = (data) => {\n  // This is a placeholder encryption simulation\n  // In production, use a real homomorphic encryption library\n  const mockEncrypted = Buffer.from(JSON.stringify(data)).toString('base64');\n  return `encrypted_${mockEncrypted}_${MOCK_PUBLIC_KEY}`;\n};\n\n/**\n * Validates email format\n * @param {string} email - Email to validate\n * @returns {boolean} - Whether email is valid\n */\nexport const isValidEmail = (email) => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n/**\n * Validates age input\n * @param {number} age - Age to validate\n * @returns {boolean} - Whether age is valid\n */\nexport const isValidAge = (age) => {\n  return age >= 0 && age <= 120;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,eAAe,GAAG,sBAAsB;;AAE9C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIC,IAAI,IAAK;EACnC;EACA;EACA,MAAMC,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACC,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC,CAAC,CAACM,QAAQ,CAAC,QAAQ,CAAC;EAC1E,OAAO,aAAaL,aAAa,IAAIH,eAAe,EAAE;AACxD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,YAAY,GAAIC,KAAK,IAAK;EACrC,MAAMC,UAAU,GAAG,4BAA4B;EAC/C,OAAOA,UAAU,CAACC,IAAI,CAACF,KAAK,CAAC;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,UAAU,GAAIC,GAAG,IAAK;EACjC,OAAOA,GAAG,IAAI,CAAC,IAAIA,GAAG,IAAI,GAAG;AAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}